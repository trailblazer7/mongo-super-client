{
  "_args": [
    [
      {
        "raw": "nw-builder@^3.1.2",
        "scope": null,
        "escapedName": "nw-builder",
        "name": "nw-builder",
        "rawSpec": "^3.1.2",
        "spec": ">=3.1.2 <4.0.0",
        "type": "range"
      },
      "C:\\files\\projects\\mongo-super-client"
    ]
  ],
  "_from": "nw-builder@>=3.1.2 <4.0.0",
  "_id": "nw-builder@3.4.0",
  "_inCache": true,
  "_location": "/nw-builder",
  "_nodeVersion": "6.10.3",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/nw-builder-3.4.0.tgz_1496005097195_0.7916889621410519"
  },
  "_npmUser": {
    "name": "adam-lynch",
    "email": "contact@adamlynch.ie"
  },
  "_npmVersion": "4.6.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "nw-builder@^3.1.2",
    "scope": null,
    "escapedName": "nw-builder",
    "name": "nw-builder",
    "rawSpec": "^3.1.2",
    "spec": ">=3.1.2 <4.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "#DEV:/"
  ],
  "_resolved": "https://registry.npmjs.org/nw-builder/-/nw-builder-3.4.0.tgz",
  "_shasum": "51ac09f6ca46c13f0c57a99eec00cf1bd720a477",
  "_shrinkwrap": null,
  "_spec": "nw-builder@^3.1.2",
  "_where": "C:\\files\\projects\\mongo-super-client",
  "author": {
    "name": "Steffen MÃ¼ller"
  },
  "bin": {
    "nwbuild": "./bin/nwbuild"
  },
  "bugs": {
    "url": "https://github.com/mllrsohn/nw-builder/issues"
  },
  "contributors": [
    {
      "name": "Adam Lynch",
      "email": "contact@adamlynch.com"
    }
  ],
  "dependencies": {
    "archiver": "^1.3.0",
    "bluebird": "^3.4.0",
    "boxen": "^1.1.0",
    "chalk": "^1.1.3",
    "deprecate": "~1.0.0",
    "extract-zip": "^1.6.5",
    "graceful-fs-extra": "^2.0.0",
    "graceful-ncp": "^3.0.0",
    "inherits": "~2.0.1",
    "lazy-req": "^2.0.0",
    "lodash": "~4.17.4",
    "optimist": "^0.6.1",
    "platform-overrides": "~1.0.1",
    "plist": "^2.0.1",
    "progress": "~1.1.7",
    "recursive-readdir-sync": "^1.0.6",
    "request": "~2.81.0",
    "rimraf": "^2.5.2",
    "semver": "^2.3.2",
    "simple-glob": "~0.1.0",
    "tar-fs": "^1.13.0",
    "temp": "github:adam-lynch/node-temp#remove_tmpdir_dep",
    "update-notifier": "^1.0.3",
    "winresourcer": "^0.9.0"
  },
  "description": "nw-builder",
  "devDependencies": {
    "decompress-zip": "0.3.0",
    "eol": "^0.9.0",
    "nock": "^9.0.5",
    "redtape": "~1.0.0",
    "tap-spec": "^4.1.1",
    "tape": "~4.6.2"
  },
  "directories": {},
  "dist": {
    "shasum": "51ac09f6ca46c13f0c57a99eec00cf1bd720a477",
    "tarball": "https://registry.npmjs.org/nw-builder/-/nw-builder-3.4.0.tgz"
  },
  "engines": {
    "node": ">= 4.0.0"
  },
  "gitHead": "2b8ed108043da1909614012633cd61e9e4802856",
  "homepage": "https://github.com/mllrsohn/nw-builder",
  "keywords": [
    "NW.js",
    "node-webkit",
    "desktop",
    "application"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "adam-lynch",
      "email": "contact@adamlynch.ie"
    }
  ],
  "name": "nw-builder",
  "optionalDependencies": {},
  "readme": "# nw-builder [![NPM version][npm-image]][npm-url] [![Build Status][travis-image]][travis-url] [![Dependency Status][depstat-image]][depstat-url] [![Join the chat at https://gitter.im/nwjs/nw-builder](https://badges.gitter.im/nwjs/nw-builder.svg)](https://gitter.im/nwjs/nw-builder?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\n[![NPM](https://nodei.co/npm/nw-builder.png?downloads=true)](https://nodei.co/npm/nw-builder/)\n\n> Build your [NW.js](https://github.com/nwjs/nw.js) apps for Mac, Win and Linux programmatically or via CLI.\n\n\n### Installation\n\n##### Local\n```shell\nnpm install nw-builder --save-dev\n```\n\n##### Global\n```shell\nnpm install nw-builder -g\n```\n\n##### Grunt and Gulp Plugins\nYes, there is also a [Grunt Plugin](https://github.com/nwjs/grunt-nw-builder). For Gulp, just use the module :)\n\n\n## Usage\n\n```shell\nUsage: nwbuild [options] [path]\n\nOptions:\n  -p, --platforms      Platforms to build, comma-sperated, can be: win32,win64,osx32,osx64,linux32,linux64   ['osx64', 'win32', 'win64']\n  -v, --version        The nw version, eg. 0.8.4                                             [default: \"latest\"]\n  -r, --run            Runs NW.js for the current platform                                   [default: false]\n  -o, --buildDir       The build folder                                                      [default: \"./build\"]\n  -f, --forceDownload  Force download of NW.js                                               [default: false]\n  --cacheDir           The cache folder\n  --quiet              Disables logging                                                      [default: false]\n\n```\n#### Run NW.js\nDuring development you can run NW.js with `nwbuild -r path/to/your/younwapp/`\n\nOr use the module:\n\n```js\nvar NwBuilder = require('nw-builder');\nvar nw = new NwBuilder({\n    files: './path/to/nwfiles/**/**', // use the glob format\n    platforms: ['osx64', 'win32', 'win64'],\n    version: '0.14.6'\n});\n\n//Log stuff you want\n\nnw.on('log',  console.log);\n\n// Build returns a promise\nnw.build().then(function () {\n   console.log('all done!');\n}).catch(function (error) {\n    console.error(error);\n});\n```\n\n`build` also supports callbacks:\n\n```javascript\nnw.build(function(err) {\n    if(err) console.log(err);\n})\n\n```\n\n### Options\n\n#### options.files *Required*\nType: `String`  \nDefault value: `null`  \n\nThe path to your node webkit app. It supports [simple-glob](https://github.com/jedmao/simple-glob) so you can do stuff like `['foo/*.js', '!foo/bar.js', 'foo/bar.js']`.\n\n\n#### options.version\nType: `String`\nDefault value: `'latest'`\n\nThe version of NW.js you want to use. Per default it looks up the latest version. [Here is a list](https://github.com/nwjs/nw.js/wiki/Downloads-of-old-versions) of all available releases\n\n#### options.flavor\nType: `String`\nDefault value: `'sdk'`\n\nThe flavor of NW.js you want to use. Per default it will be `sdk`. [Here is a list](https://github.com/nwjs/nw.js/wiki/Build-Flavors) of all flavor available.\n\nThe value `sdk` is most used for development whereas `normal` for production.\n\n#### options.platforms\nType: `Array`  \nDefault value: `['osx64', 'win32', 'win64']`\n\nThe platforms you want to build. Can be `['win32', 'win64', 'osx32', 'osx64', 'linux32', 'linux64']`\n\nThe values `['win', 'osx', 'linux']` can also be used and will build both the 32 and 64 bit versions of the specified platforms.\n\nBe aware that the osx32 version can only be built with legacy version of nwjs. Since > 0.12.0, only 64 bits for osx works.\n\n#### options.appName\nType: `String`  \nDefault value: `false`  \n\nThe Name of your NW.js app. If this value is set to null, it will autodetect the `name` from your projects package.json. This will be used to generate a plist file for mac.\n\n#### options.appVersion\nType: `String`  \nDefault value: `false`  \n\nThe version of your NW.js app. If this value is set to null, it will autodetect the `version` form your projects package.json. This will be used to generate a plist file for mac.\n\n#### options.buildDir\nType: `String`  \nDefault value: `./build`  \n\nThis is where the releases are saved.\n\n#### options.cacheDir\nType: `String`  \nDefault value: `./cache`  \n\nThis is where the cached NW.js downloads are\n\n#### options.buildType\nType: `String` or `function`\nDefault value: `default`  \n\nHow you want to save your build.\n\n* `default` [appName]\n* `versioned` [appName] -v[appVersion]\n* `timestamped` [appName] - [timestamp];\n* A function with options as scope (e.g `function () {return this.appVersion;}` )\n\n#### options.forceDownload\nType: `Boolean`  \nDefault value: `false`  \n\nThis will delete everything in your `build_dir` directory, including the cached downloaded prebuilt binaries\n\n#### options.macCredits\nType: `String`  \nDefault value: `false`  \n\nMAC ONLY: The path to your credits.html file. If your don't provide your own it will use the one provided by NW.js\n\n#### options.macIcns\nType: `String`  \nDefault value: `false`  \n\nMAC ONLY: The path to your ICNS icon file. If your don't provide your own it will use the one provided by NW.js\n\n#### options.zip\nType: `Boolean`\nDefault value: `null`\n\nWINDOW ONLY: Instead of zipping the application and merging it into the executable the application content is placed next to the application (which speed up the startup time for large apps). The default behaviour is platform specific. For `windows` and `linux`, the application is zipped and merged into the executable. For `mac`, the application is not zipped.\n\n#### options.zipOptions\nType: `Object`\nDefault value: `null`\n\nAllows to configure the underling zip library parameters, like store or compression ratio.\n\nSee [archiver](http://archiverjs.com/docs/global.html#ZipOptions) documentation for detailed description of properties.\n\n#### options.macPlist\nType: `String` or `Object`  \nDefault value: `false`  \n\nMAC ONLY: Pass a string containing the path to your own plist file. If a string isn't passed, a plist file will be generated from your package.json. Pass an object to overwrite or add properties to the generated plist file.\n\n#### options.winIco\nType: `String`  \nDefault value: `null`\n\nWINDOWS ONLY: The path to your ICO icon file. If your don't provide your own it will use the one provided by NW.js. If you are building on MAC or LINUX you must have [Wine](https://www.winehq.org/) installed to use this option.\n\n#### options.macZip (DEPRECATED)\nType: `Boolean`\nDefault value: `null`\n\nMAC ONLY: Use a `app.nw` folder instead of `ZIP` file, this significantly improves the startup speed of applications on `mac`, since no decompressing is needed. Builds on other platforms will still use `ZIP` files. The default behaviour of node-webkit-builder is to not use `ZIP` files on the `mac` platform. In case of the `mac` platform the option `macZip` can override the option `zip`.\n\n### Manifest Options\n\n#### platformOverrides\n\nAllows you to specify platform-specific manifest values. Example manifest:\n\n```json\n{\n    \"name\": \"nw-demo\",\n    \"version\": \"0.1.0\",\n    \"main\": \"index.html\",\n    \"window\": {\n        \"frame\": false,\n        \"toolbar\": false\n    },\n    \"platformOverrides\": {\n        \"win\": {\n            \"window\": {\n                \"toolbar\": true\n            }\n        },\n        \"win32\": {\n            \"window\": {\n                \"frame\": true,\n                \"toolbar\": false\n            }\n        },\n        \"win64\": {\n            \"window\": {\n                \"frame\": true\n            }\n        },\n        \"osx\": {\n            ...\n        },\n        \"osx32\": {\n            ...\n        },\n        \"osx64\": {\n            ...\n        },\n        \"linux\": {\n            ...\n        },\n        \"linux32\": {\n            ...\n        },\n        \"linux64\": {\n            ...\n        },\n    }\n\n```\n\nThe platform-specific options will override the others only when building that platform only and the `platformOverrides` property will be removed.\n\nFor example, when building for Windows, the manifest generated and put into the end app (from the manifest above) would be:\n\n```json\n{\n    \"name\": \"nw-demo\",\n    \"version\": \"0.1.0\",\n    \"main\": \"index.html\",\n    \"window\": {\n        \"frame\": true,\n        \"toolbar\": false\n    }\n}\n```\n\nAdditionally, when specifying multiple version of the same platform such as \"win\", \"win32\", and \"win64\", changes will be applied such that \"win\" applies to both \"win32\" and \"win64\", while \"win32\" and \"win64\" apply only to the specified version. Also note that \"win32\" and \"win64\" can further override changes made in \"win\".\n\nSee [#85](https://github.com/nwjs/nw-builder/issues/85) and [#94](https://github.com/nwjs/nw-builder/pull/94) for more information. If you need this during development too, see [platform-overrides](https://github.com/adam-lynch/platform-overrides) and [gulp-platform-overrides](https://github.com/adam-lynch/gulp-platform-overrides). There is no Grunt plugin, [yet](https://github.com/new).\n\n##Â Troubleshooting\n\n### OSX ulimit\n\nDarwin (OS X kernel) has a low limit for file descriptors (256 per process) by default, so you might get an `EMFILE` error or an error mentioning \"too many open files\" if youtry to open more file descriptors than this.\n\nTo get around it, run `ulimit -n 1024` (or add it to your `~/.bash_profile`). For more information, see [henvic/osx-ulimit](https://github.com/henvic/osx-ulimit).\n\n## Team\n\n**Current**\n\n- Adam Lynch ([@adam-lynch](https://github.com/adam-lynch))\n- RÃ©my Boulanouar ([@DblK](https://github.com/DblK))\n- You? :smile:. We're open to contributions (to the code, documentation, or anything else) and or additional maintainers.\n\n**Past**\n\n- Steffen MÃ¼ller ([@steffenmllr](https://github.com/steffenmllr)) (Creator)\n- Gabe Paez ([@gabepaez](https://github.com/gabepaez))\n- Andy Trevorah ([@trevorah](https://github.com/trevorah))\n\n## Contributing\n\nSee [CONTRIBUTING.md](CONTRIBUTING.md).\n\n## Release History\n\nSee [CHANGELOG.md](CHANGELOG.md) or [Releases](https://github.com/nwjs-community/nw-builder/blob/develop/releases).\n\n## License\n\n[MIT License](https://en.wikipedia.org/wiki/MIT_License)\n\n[npm-url]: https://www.npmjs.com/package/nw-builder\n[npm-image]: https://img.shields.io/npm/v/nw-builder.svg?style=flat\n\n[travis-url]: https://travis-ci.org/nwjs/nw-builder\n[travis-image]: https://img.shields.io/travis/nwjs/nw-builder/master.svg?style=flat\n\n[depstat-url]: https://david-dm.org/nwjs/nw-builder\n[depstat-image]: https://david-dm.org/nwjs/nw-builder.svg?style=flat\n\n\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/mllrsohn/nw-builder.git"
  },
  "scripts": {
    "test": "tape test/*.js"
  },
  "version": "3.4.0"
}
